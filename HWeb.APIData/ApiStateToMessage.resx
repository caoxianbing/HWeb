<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BindDevice_0" xml:space="preserve">
    <value>绑定成功</value>
  </data>
  <data name="BindDevice_1000" xml:space="preserve">
    <value>用户不存在</value>
  </data>
  <data name="BindDevice_1100" xml:space="preserve">
    <value>设备不存在</value>
  </data>
  <data name="BindDevice_1500" xml:space="preserve">
    <value>设备已被绑定</value>
  </data>
  <data name="BindDevice_1550" xml:space="preserve">
    <value>设备已存在</value>
  </data>
  <data name="BindDevice_4000" xml:space="preserve">
    <value>绑定失败</value>
  </data>
  <data name="DeviceCheck_1000" xml:space="preserve">
    <value>用户不存在</value>
  </data>
  <data name="DeviceCheck_1100" xml:space="preserve">
    <value>设备不存在</value>
  </data>
  <data name="DeviceCheck_1105" xml:space="preserve">
    <value>设备属于自己</value>
  </data>
  <data name="DeviceCheck_1106" xml:space="preserve">
    <value>你已获得该设备访问权限</value>
  </data>
  <data name="DeviceCheck_1107" xml:space="preserve">
    <value>设备已被绑定，请先在设备方解绑</value>
  </data>
  <data name="HealthInfo_0" xml:space="preserve">
    <value>获取成功</value>
  </data>
  <data name="HealthInfo_200" xml:space="preserve">
    <value>未获取到数据</value>
  </data>
  <data name="HealthReport_0" xml:space="preserve">
    <value>获取成功</value>
  </data>
  <data name="HealthReport_200" xml:space="preserve">
    <value>获取成功，但没有数据</value>
  </data>
  <data name="ListDevice_0" xml:space="preserve">
    <value>获取成功</value>
  </data>
  <data name="ListDevice_100" xml:space="preserve">
    <value>获取成功，但是没有数据</value>
  </data>
  <data name="ListDevice_2002" xml:space="preserve">
    <value>参数不正确</value>
  </data>
  <data name="Login_1001" xml:space="preserve">
    <value>设备方登陆失败</value>
  </data>
  <data name="Register_0" xml:space="preserve">
    <value>注册成功</value>
  </data>
  <data name="Register_1001" xml:space="preserve">
    <value>用户名已被注册</value>
  </data>
  <data name="Register_1002" xml:space="preserve">
    <value>注册失败</value>
  </data>
  <data name="Register_1003" xml:space="preserve">
    <value>用户名，密码不能为空</value>
  </data>
  <data name="Register_1100" xml:space="preserve">
    <value>设备Imei码不存在</value>
  </data>
  <data name="Register_1102" xml:space="preserve">
    <value>设备已被注册</value>
  </data>
  <data name="RemoveShare_0" xml:space="preserve">
    <value>解绑成功</value>
  </data>
  <data name="RemoveShare_1001" xml:space="preserve">
    <value>解绑失败</value>
  </data>
  <data name="SendCommand_0" xml:space="preserve">
    <value>发送成功</value>
  </data>
  <data name="SendCommand_1101" xml:space="preserve">
    <value>设备不存在</value>
  </data>
  <data name="SendCommand_1108" xml:space="preserve">
    <value>设备号码未填写</value>
  </data>
  <data name="SendCommand_1800" xml:space="preserve">
    <value>设备不在线</value>
  </data>
  <data name="SendCommand_1801" xml:space="preserve">
    <value>发送超时</value>
  </data>
  <data name="SendCommand_1802" xml:space="preserve">
    <value>下发失败</value>
  </data>
  <data name="SendCommand_1803" xml:space="preserve">
    <value>指令已发送</value>
  </data>
  <data name="SendCommand_1804" xml:space="preserve">
    <value>24小时短信发送超过30条</value>
  </data>
  <data name="SendCommand_2003" xml:space="preserve">
    <value>绑定中间号码失败</value>
  </data>
  <data name="SendCommand_5" xml:space="preserve">
    <value>设备正在拍照</value>
  </data>
  <data name="SendCommand_6" xml:space="preserve">
    <value>设备存储空间已满</value>
  </data>
  <data name="SendCommand_7" xml:space="preserve">
    <value>设备不在线,指令已存入队列</value>
  </data>
  <data name="SendCommand_7000" xml:space="preserve">
    <value>无权操作</value>
  </data>
</root>